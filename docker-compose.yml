# docker-compose.yml (updated)

services:
  # Kafka (with Zookeeper)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
      - "9093:9093" # Internal listener for services
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9093,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true" # Auto-create topics for dev

  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    hostname: postgres
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-portfolio_db}
      POSTGRES_USER: ${POSTGRES_USER:-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5

  # MongoDB Database
  mongodb:
    image: mongo:7.0 # Changed to a more general tag for MongoDB 7.0
    hostname: mongodb
    container_name: mongodb
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD:-password}
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh mongodb:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Ingestion Service
  ingestion-service:
    build:
      context: .
      dockerfile: ./services/ingestion-service/Dockerfile
    hostname: ingestion-service
    container_name: ingestion-service
    ports:
      - "8000:8000" # Expose FastAPI port
    environment:
      PYTHONPATH: "/app" # Add /app to PYTHONPATH for common module import
      # Override Alembic's sqlalchemy.url for Docker context
      SQLALCHEMY_DATABASE_URL: "postgresql://${POSTGRES_USER:-user}:${POSTGRES_PASSWORD:-password}@postgres:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-portfolio_db}"
    depends_on: # THIS SECTION IS CHANGED
      postgres:
        condition: service_healthy
      kafka: # Changed to mapping
        condition: service_started # Kafka healthcheck can be complex, `service_started` is safer initially.
                                 # Or if you implement a specific Kafka healthcheck, change to service_healthy
      mongodb: # Changed to mapping
        condition: service_healthy
    volumes:
      - ./services/ingestion-service/app:/app/app # Mount for live code changes during dev
      - ./common:/app/common # Mount common module for live changes
      - ./alembic:/app/alembic # Mount alembic directory for migrations
      - ./alembic.ini:/app/alembic.ini # Mount alembic config

    # Command to run Alembic migrations then start Uvicorn
    # In production, migrations are usually a separate step.
    # For dev, running on startup is convenient.
    command: >
      bash -c "
        alembic -c /app/alembic.ini upgrade head &&
        uvicorn app.main:app --host 0.0.0.0 --port 8000
      "

volumes:
  postgres_data:
  mongo_data: