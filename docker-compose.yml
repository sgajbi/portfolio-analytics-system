# docker-compose.yml
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.15
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_4LW_COMMANDS_WHITELIST: "ruok,stat,mntr,conf"
      KAFKA_OPTS: "-Dzookeeper.4lw.commands.whitelist=ruok,stat,mntr,conf"
    healthcheck:
      test: ["CMD", "bash", "-c", "echo ruok | nc localhost 2181 | grep imok"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
      - "9093:9093" # Internal listener for services
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9093,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server kafka:9093 --list || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  postgres:
    image: postgres:16-alpine
    hostname: postgres
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-portfolio_db}
      POSTGRES_USER: ${POSTGRES_USER:-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5

  mongodb:
    image: mongo:7.0
    hostname: mongodb
    container_name: mongodb
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD:-password}
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh mongodb:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  ingestion-service:
    build:
      context: .
      dockerfile: ./services/ingestion-service/Dockerfile
    hostname: ingestion-service
    container_name: ingestion-service
    ports:
      - "8000:8000"
    environment:
      PYTHONPATH: "/app"
      KAFKA_BOOTSTRAP_SERVERS: kafka:9093
      KAFKA_RAW_TRANSACTIONS_TOPIC: raw_transactions
    depends_on:
      kafka:
        condition: service_healthy
    volumes: # Keeping volumes for development convenience
      - ./services/ingestion-service/app:/app/app
      - ./common:/app/common
      # Alembic files are here, but this service doesn't run migrations
      - ./alembic.ini:/app/alembic.ini
      - ./alembic:/app/alembic
    command: >
      bash -c "
        uvicorn app.main:app --host 0.0.0.0 --port 8000
      "

  transaction-persistence-service:
    build:
      context: .
      dockerfile: ./services/transaction-persistence-service/Dockerfile
    hostname: transaction-persistence-service
    container_name: transaction-persistence-service
    environment:
      PYTHONPATH: "/app"
      KAFKA_BOOTSTRAP_SERVERS: kafka:9093
      KAFKA_RAW_TRANSACTIONS_TOPIC: raw_transactions
      KAFKA_RAW_TRANSACTIONS_COMPLETED_TOPIC: raw_transactions_completed
      # Explicitly set POSTGRES variables to their desired defaults
      POSTGRES_HOST: postgres
      POSTGRES_DB: portfolio_db # Changed from ${POSTGRES_DB:-portfolio_db}
      POSTGRES_USER: user       # Changed from ${POSTGRES_USER:-user}
      POSTGRES_PASSWORD: password # Changed from ${POSTGRES_PASSWORD:-password}
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:5432/${POSTGRES_DB}
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes: # Keeping volumes for development convenience
      - ./services/transaction-persistence-service/app:/app/app
      - ./common:/app/common
      # NEW: Mount Alembic files for this service to run migrations
      - ./alembic.ini:/app/alembic.ini
      - ./alembic:/app/alembic
    command: 'bash -c "
        # Wait for PostgreSQL to be ready before running migrations
        /usr/bin/env python -c ''
import sys, time, os
from sqlalchemy import create_engine
from sqlalchemy.exc import OperationalError
db_url = os.environ.get(\"DATABASE_URL\")
if not db_url:
    print(\"DATABASE_URL environment variable is not set.\", file=sys.stderr)
    sys.exit(1)
engine = create_engine(db_url)
for i in range(20): # Retry up to 20 times, 1 second apart
    try:
        conn = engine.connect()
        conn.close()
        print(\"PostgreSQL is ready!\")
        break
    except OperationalError:
        print(f\"PostgreSQL not ready, retrying... ({i+1}/20)\")
        time.sleep(1)
else:
    print(\"PostgreSQL did not become ready in time.\", file=sys.stderr)
    sys.exit(1)
        ''
        # Run Alembic migrations
        alembic -c /app/alembic.ini upgrade head
        # Then start the main application
        exec python app/main.py
      "'

  transaction-cost-calculator-service:
    build:
      context: .
      dockerfile: ./services/transaction-cost-calculator-service/Dockerfile
    hostname: transaction-cost-calculator-service
    container_name: transaction-cost-calculator-service
    environment:
      PYTHONPATH: "/app"
      KAFKA_BOOTSTRAP_SERVERS: "kafka:9093"
      POSTGRES_USER: ${POSTGRES_USER:-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-portfolio_db}
      POSTGRES_HOST: ${POSTGRES_HOST:-postgres}
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - ./services/transaction-cost-calculator-service/app:/app/app
      - ./common:/app/common
      - ./alembic.ini:/app/alembic.ini
      - ./alembic:/app/alembic
    ports:
      - "8001:8000" # CHANGED: Exposed on host port 8001 to avoid conflict with ingestion-service
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"] # Update command to bind to 0.0.0.0

volumes:
  postgres_data:
  mongo_data: