# docker-compose.yml
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_4LW_COMMANDS_WHITELIST: "ruok,stat,mntr,conf"
      KAFKA_OPTS: "-Dzookeeper.4lw.commands.whitelist=ruok,stat,mntr,conf"
    healthcheck:
      test: ["CMD", "bash", "-c", "echo ruok | nc localhost 2181 | grep imok"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - app_network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
      - "9093:9093"
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9093,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE: "false"
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server kafka:9093 --list || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    networks:
      - app_network

  kafka-topic-creator:
    build:
      context: .
      dockerfile: ./src/services/persistence_service/Dockerfile
    hostname: kafka-topic-creator
    container_name: kafka-topic-creator
    depends_on:
       kafka:
        condition: service_healthy
    command: ["python", "-m", "tools.kafka_setup"]
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9093
    networks:
      - app_network

  postgres:
    image: postgres:16-alpine
    hostname: postgres
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-portfolio_db}
      POSTGRES_USER: ${POSTGRES_USER:-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  migration-runner:
    build:
      context: .
      dockerfile: ./src/services/persistence_service/Dockerfile
    hostname: migration-runner
    container_name: migration-runner
    environment:
      DATABASE_URL: ${DATABASE_URL}
    depends_on:
      postgres:
        condition: service_healthy
    command: ["alembic", "upgrade", "head"]
    restart: 'no'
    networks:
      - app_network

  ingestion_service:
    build:
      context: .
      dockerfile: ./src/services/ingestion_service/Dockerfile
    hostname: ingestion_service
    container_name: ingestion_service
    ports:
      - "8000:8000"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9093
    depends_on:
      kafka:
        condition: service_healthy
      kafka-topic-creator:
        condition: service_completed_successfully
    volumes:
      - ./src/services/ingestion_service/app:/app/app
      - ./src/libs/portfolio-common:/app/src/libs/portfolio-common
    command: >
      uvicorn app.main:app --host 0.0.0.0 --port 8000 --timeout-keep-alive 30
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health/ready || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s

  query_service:
    build:
      context: .
      dockerfile: ./src/services/query_service/Dockerfile
    hostname: query_service
    container_name: query_service
    ports:
      - "8001:8001"
    environment:
      DATABASE_URL: ${QUERY_DATABASE_URL}
    depends_on:
      migration-runner:
        condition: service_completed_successfully
    volumes:
      - ./src/services/query_service/app:/app/app
      - ./src/libs/portfolio-common:/app/src/libs/portfolio-common
      - ./src/libs/risk-analytics-engine:/app/src/libs/risk-analytics-engine
      - ./src/libs/concentration-analytics-engine:/app/src/libs/concentration-analytics-engine
    command: uvicorn app.main:app --host 0.0.0.0 --port 8001
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8001/health/ready || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - app_network

  persistence_service:
    build:
      context: .
      dockerfile: ./src/services/persistence_service/Dockerfile
    hostname: persistence_service
    container_name: persistence_service
    ports:
      - "8080:8080"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9093
      DATABASE_URL: ${DATABASE_URL}
    depends_on:
      kafka-topic-creator:
        condition: service_completed_successfully
      migration-runner:
        condition: service_completed_successfully
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health/ready || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s
    volumes:
      - ./src/services/persistence_service/app:/app/app
      - ./src/libs/portfolio-common:/app/src/libs/portfolio-common
    command: ["python", "-m", "app.main"]
    networks:
      - app_network

  cost_calculator_service:
    build:
      context: .
      dockerfile: ./src/services/calculators/cost_calculator_service/Dockerfile
    hostname: cost_calculator_service
    container_name: cost_calculator_service
    ports:
      - "8083:8083"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9093
      DATABASE_URL: ${DATABASE_URL}
    depends_on:
      kafka-topic-creator:
       condition: service_completed_successfully
      migration-runner:
        condition: service_completed_successfully
    restart: unless-stopped
    volumes:
      - ./src/services/calculators/cost_calculator_service/app:/app/app
      - ./src/libs/portfolio-common:/app/src/libs/portfolio-common
      - ./src/libs/financial-calculator-engine:/app/src/libs/financial-calculator-engine
    command: ["python", "-m", "app.main"]
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8083/health/ready || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - app_network

  cashflow_calculator_service:
    build:
      context: .
      dockerfile: ./src/services/calculators/cashflow_calculator_service/Dockerfile
    hostname: cashflow_calculator_service
    container_name: cashflow_calculator_service
    ports:
     - "8082:8082"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9093
      DATABASE_URL: ${DATABASE_URL}
    depends_on:
      kafka-topic-creator:
        condition: service_completed_successfully
      migration-runner:
        condition: service_completed_successfully
    restart: unless-stopped
    volumes:
      - ./src/services/calculators/cashflow_calculator_service/app:/app/app
      - ./src/libs/portfolio-common:/app/src/libs/portfolio-common
    command: ["python", "-m", "app.main"]
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8082/health/ready || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - app_network

  position_calculator_service:
    build:
      context: .
      dockerfile: ./src/services/calculators/position_calculator/Dockerfile
    hostname: position_calculator_service
    container_name: position_calculator_service
    ports:
      - "8081:8081"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9093
      DATABASE_URL: ${DATABASE_URL}
    depends_on:
      kafka-topic-creator:
        condition: service_completed_successfully
      migration-runner:
       condition: service_completed_successfully
    restart: unless-stopped
    volumes:
      - ./src/services/calculators/position_calculator/app:/app/app
      - ./src/libs/portfolio-common:/app/src/libs/portfolio-common
    command: ["python", "-m", "app.main"]
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8081/health/ready || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - app_network

  position_valuation_calculator:
    build:
      context: .
      dockerfile: ./src/services/calculators/position_valuation_calculator/Dockerfile
    hostname: position_valuation_calculator
    container_name: position_valuation_calculator
    ports:
      - "8084:8084"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9093
      DATABASE_URL: ${DATABASE_URL}
      VALUATION_SCHEDULER_POLL_INTERVAL: 2
    depends_on:
      kafka-topic-creator:
        condition: service_completed_successfully
      migration-runner:
        condition: service_completed_successfully
    restart: unless-stopped
    volumes:
      - ./src/services/calculators/position_valuation_calculator/app:/app/app
      - ./src/libs/portfolio-common:/app/src/libs/portfolio-common
    command: ["python", "-m", "app.main"]
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8084/health/ready || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - app_network

  timeseries_generator_service:
    build:
      context: .
      dockerfile: ./src/services/timeseries_generator_service/Dockerfile
    hostname: timeseries_generator_service
    container_name: timeseries_generator_service
    ports:
      - "8085:8085"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9093
      DATABASE_URL: ${DATABASE_URL}
    depends_on:
      kafka-topic-creator:
        condition: service_completed_successfully
      migration-runner:
        condition: service_completed_successfully
    restart: unless-stopped
    volumes:
      - ./src/services/timeseries_generator_service/app:/app/app
      - ./src/libs/portfolio-common:/app/src/libs/portfolio-common
    command: ["python", "-m", "app.main"]
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8085/health/ready || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - app_network

  prometheus:
    image: prom/prometheus:v2.47.2
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    networks:
      - app_network
    depends_on:
      - ingestion_service
      - query_service
      - persistence_service
      - cost_calculator_service
      - cashflow_calculator_service
      - position_calculator_service
      - position_valuation_calculator
      - timeseries_generator_service

  grafana:
    image: grafana/grafana:10.1.5
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
    networks:
      - app_network
    depends_on:
      - prometheus

volumes:
  postgres_data:

networks:
  app_network:
    driver: bridge