# docker-compose.yml
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.15
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKeeper_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_4LW_COMMANDS_WHITELIST: "ruok,stat,mntr,conf"
      KAFKA_OPTS: "-Dzookeeper.4lw.commands.whitelist=ruok,stat,mntr,conf"
    healthcheck:
      test: ["CMD", "bash", "-c", "echo ruok | nc localhost 2181 | grep imok"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - app_network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
      - "9093:9093"
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9093,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE: "false"
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server kafka:9093 --list || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    networks:
      - app_network

  kafka-topic-creator:
    build:
      context: .
      dockerfile: ./src/services/persistence_service/Dockerfile
    hostname: kafka-topic-creator
    container_name: kafka-topic-creator
    depends_on:
      kafka:
        condition: service_healthy
    command: >
      bash -c "
        # Loop until the kafka hostname is resolvable by the system's name service
        until getent hosts kafka; do
          echo 'Waiting for Kafka to be resolvable...';
          sleep 2;
        done;
        # Now run the original command
        python -m tools.kafka_setup
      "
    environment:
      PYTHONPATH: "/app:/app/src/libs/portfolio-common"
      KAFKA_BOOTSTRAP_SERVERS: kafka:9093
    networks:
      - app_network

  postgres:
    image: postgres:16-alpine
    hostname: postgres
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-portfolio_db}
      POSTGRES_USER: ${POSTGRES_USER:-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  migration-runner:
    build:
      context: .
      dockerfile: ./src/services/persistence_service/Dockerfile
    hostname: migration-runner
    container_name: migration-runner
    environment:
      PYTHONPATH: "/app:/app/src/libs/portfolio-common"
      DATABASE_URL: postgresql://user:password@postgres:5432/portfolio_db
    depends_on:
      postgres:
        condition: service_healthy
    command: ["alembic", "upgrade", "head"]
    networks:
      - app_network

  ingestion_service:
    build:
      context: .
      dockerfile: ./src/services/ingestion_service/Dockerfile
    hostname: ingestion_service
    container_name: ingestion_service
    ports:
      - "8000:8000"
    environment:
      PYTHONPATH: "/app:/app/src/libs/portfolio-common"
      KAFKA_BOOTSTRAP_SERVERS: kafka:9093
    depends_on:
      kafka-topic-creator:
        condition: service_completed_successfully
    volumes:
      - ./src/services/ingestion_service/app:/app/app
      - ./src/libs/portfolio-common:/app/src/libs/portfolio-common
    command: >
      uvicorn app.main:app --host 0.0.0.0 --port 8000 --workers 4 --timeout-keep-alive 30
    networks:
      - app_network

  query-service:
    build:
      context: .
      dockerfile: ./src/services/query_service/Dockerfile
    hostname: query-service
    container_name: query-service
    ports:
      - "8001:8001"
    environment:
      PYTHONPATH: "/app:/app/src/libs/portfolio-common"
      DATABASE_URL: postgresql://user:password@postgres:5432/portfolio_db
    depends_on:
      migration-runner:
        condition: service_completed_successfully
    volumes:
      - ./src/services/query_service/app:/app/app
      - ./src/libs/portfolio-common:/app/src/libs/portfolio-common
    command: uvicorn app.main:app --host 0.0.0.0 --port 8001
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8001/health/ready || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - app_network

  persistence_service:
    build:
      context: .
      dockerfile: ./src/services/persistence_service/Dockerfile
    hostname: persistence-service
    container_name: persistence-service
    ports:
      - "8080:8080"
    environment:
      PYTHONPATH: "/app:/app/src/libs/portfolio-common"
      KAFKA_BOOTSTRAP_SERVERS: kafka:9093
      DATABASE_URL: postgresql://user:password@postgres:5432/portfolio_db
    depends_on:
      kafka-topic-creator:
        condition: service_completed_successfully
      migration-runner:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health/ready || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s
    volumes:
      - ./src/services/persistence_service/app:/app/app
      - ./src/libs/portfolio-common:/app/src/libs/portfolio-common
    command: ["python", "-m", "app.main"]
    networks:
      - app_network

  cost_calculator_service:
    build:
      context: .
      dockerfile: ./src/services/calculators/cost_calculator_service/Dockerfile
    hostname: cost-calculator-service
    container_name: cost-calculator-service
    ports:
      - "8083:8083"
    environment:
      PYTHONPATH: "/app:/app/src/libs/portfolio-common:/app/src/libs/financial-calculator-engine/src"
      KAFKA_BOOTSTRAP_SERVERS: kafka:9093
      DATABASE_URL: postgresql://user:password@postgres:5432/portfolio_db # Added for health check
    depends_on:
      kafka-topic-creator:
        condition: service_completed_successfully
      migration-runner:
        condition: service_completed_successfully
    volumes:
      - ./src/services/calculators/cost_calculator_service/app:/app/app
      - ./src/libs/portfolio-common:/app/src/libs/portfolio-common
      - ./src/libs/financial-calculator-engine:/app/src/libs/financial-calculator-engine
    command: ["python", "-m", "app.main"]
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8083/health/ready || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - app_network

  cashflow_calculator_service:
    build:
      context: .
      dockerfile: ./src/services/calculators/cashflow_calculator_service/Dockerfile
    hostname: cashflow-calculator-service
    container_name: cashflow-calculator-service
    ports:
      - "8082:8082"
    environment:
      PYTHONPATH: "/app:/app/src/libs/portfolio-common"
      KAFKA_BOOTSTRAP_SERVERS: kafka:9093
      DATABASE_URL: postgresql://user:password@postgres:5432/portfolio_db
    depends_on:
      kafka-topic-creator:
        condition: service_completed_successfully
      migration-runner:
        condition: service_completed_successfully
    volumes:
      - ./src/services/calculators/cashflow_calculator_service/app:/app/app
      - ./src/libs/portfolio-common:/app/src/libs/portfolio-common
    command: ["python", "-m", "app.main"]
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8082/health/ready || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - app_network

  position_calculator_service:
    build:
      context: .
      dockerfile: ./src/services/calculators/position_calculator/Dockerfile
    hostname: position-calculator-service
    container_name: position-calculator-service
    ports:
      - "8081:8081"
    environment:
      PYTHONPATH: "/app:/app/src/libs/portfolio-common"
      KAFKA_BOOTSTRAP_SERVERS: kafka:9093
      DATABASE_URL: postgresql://user:password@postgres:5432/portfolio_db
    depends_on:
      kafka-topic-creator:
        condition: service_completed_successfully
      migration-runner:
        condition: service_completed_successfully
    volumes:
      - ./src/services/calculators/position_calculator/app:/app/app
      - ./src/libs/portfolio-common:/app/src/libs/portfolio-common
    command: ["python", "-m", "app.main"]
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8081/health/ready || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - app_network

  position_valuation_calculator:
    build:
      context: .
      dockerfile: ./src/services/calculators/position_valuation_calculator/Dockerfile
    hostname: position-valuation-calculator
    container_name: position-valuation-calculator
    ports:
      - "8084:8084"
    environment:
      PYTHONPATH: "/app:/app/src/libs/portfolio-common"
      KAFKA_BOOTSTRAP_SERVERS: kafka:9093
      DATABASE_URL: postgresql://user:password@postgres:5432/portfolio_db
    depends_on:
      kafka-topic-creator:
        condition: service_completed_successfully
      migration-runner:
        condition: service_completed_successfully
    volumes:
      - ./src/services/calculators/position_valuation_calculator/app:/app/app
      - ./src/libs/portfolio-common:/app/src/libs/portfolio-common
    command: ["python", "-m", "app.main"]
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8084/health/ready || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - app_network

  timeseries_generator_service:
    build:
      context: .
      dockerfile: ./src/services/timeseries_generator_service/Dockerfile
    hostname: timeseries-generator-service
    container_name: timeseries-generator-service
    ports:
      - "8085:8085"
    environment:
      PYTHONPATH: "/app:/app/src/libs/portfolio-common"
      KAFKA_BOOTSTRAP_SERVERS: kafka:9093
      DATABASE_URL: postgresql://user:password@postgres:5432/portfolio_db
    depends_on:
      kafka-topic-creator:
        condition: service_completed_successfully
      migration-runner:
        condition: service_completed_successfully
    volumes:
      - ./src/services/timeseries_generator_service/app:/app/app
      - ./src/libs/portfolio-common:/app/src/libs/portfolio-common
    command: ["python", "-m", "app.main"]
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8085/health/ready || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - app_network

volumes:
  postgres_data:

networks:
  app_network:
    driver: bridge